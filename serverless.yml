org: krystiannn
app: serverless-newsletter-list
service: serverless-newsletter-list
frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs20.x
  region: ${self:custom.region}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - s3:*
            - ses:*
          Resource: "*"
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
    region: ${self:custom.region}

functions:
  addEmailAddress:
    handler: lambdas/emailAddress/add.handler
    events:
      - http:
          path: /email-address/add
          method: post
          cors: true
          private: true
  fetchAllEmailAddresses:
    handler: lambdas/emailAddress/fetchAll.handler
    events:
      - http:
          path: /email-address/fetch-all
          method: get
          cors: true
          private: true
  deleteEmailAddress:
    handler: lambdas/emailAddress/delete.handler
    events:
      - http:
          path: /email-address/delete/{email}
          method: delete
          cors: true
          private: true
  sendEmail:
    handler: lambdas/sendEmail.handler
    events:
      - http:
          path: /send-email
          method: post
          cors: true
          private: true
  sendWeeklyOffersEmail:
    handler: lambdas/scheduleTasks/weeklyOffersEmail.handler
    events:
      - schedule: cron(0 9 ? * 7 *)
  uploadImage:
    handler: lambdas/uploadImage.handler
    events:
      - http:
          path: /upload-image
          method: post
          cors: true
          private: true

plugins:
  - serverless-add-api-key

resources:
  Resources:
    EmailsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    PhotosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

custom:
  apiKeys:
    - name: AdminApiKey
  tableName: EmailsTable
  bucketName: serverless-newsletter-list-photos-s3-bucket
  region: eu-central-1
